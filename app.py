def extrair_partes(texto):
    """Separa explica√ß√£o de c√≥digo"""
    if '```python' in texto:
        partes = texto.split('```python')
        explicacao = partes[0].strip()
        
        if len(partes) > 1:
            codigo = partes[1].split('```')[0].strip()
            return explicacao, codigo
    
    return texto.strip(), None

import pandas as pd
import requests
import time
import matplotlib.pyplot as plt
import numpy as np
import os
import json
import re
from datetime import datetime

print("="*70)
print("ü§ñ AGENTE DE AN√ÅLISE EXPLORAT√ìRIA DE DADOS (EDA)")
print("="*70)

# Leitura interativa do CSV
caminho_csv = input("\nüìÇ Digite o caminho completo do CSV: ")
if not os.path.isfile(caminho_csv):
    print("‚ùå Arquivo n√£o encontrado. Verifique o caminho e tente novamente.")
    exit()

print("\n‚è≥ Carregando dados...")
df = pd.read_csv(caminho_csv)

print("\n‚úÖ Dados carregados com sucesso!")
print(f"üìè Dimens√µes: {df.shape[0]} linhas √ó {df.shape[1]} colunas")
print(f"üìã Colunas: {', '.join(df.columns.tolist())}")
print("\nüìä Pr√©via dos primeiros registros:")
print(df.head())

# Mem√≥ria do agente - armazena an√°lises realizadas
memoria_agente = {
    "analises_realizadas": [],
    "insights_descobertos": [],
    "dados_estatisticos": {},
    "inicio_sessao": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
}

def salvar_na_memoria(tipo, conteudo):
    """Salva informa√ß√µes importantes na mem√≥ria do agente"""
    timestamp = datetime.now().strftime("%H:%M:%S")
    
    if tipo == "analise":
        memoria_agente["analises_realizadas"].append({
            "timestamp": timestamp,
            "descricao": conteudo
        })
    elif tipo == "insight":
        memoria_agente["insights_descobertos"].append({
            "timestamp": timestamp,
            "insight": conteudo
        })
    elif tipo == "estatistica":
        memoria_agente["dados_estatisticos"].update(conteudo)

def gerar_contexto_memoria():
    """Gera um resumo da mem√≥ria para incluir no prompt"""
    if not memoria_agente["analises_realizadas"]:
        return ""
    
    resumo = "\n--- MEM√ìRIA DO AGENTE (An√°lises Anteriores) ---\n"
    
    # √öltimas 3 an√°lises
    for analise in memoria_agente["analises_realizadas"][-3:]:
        resumo += f"[{analise['timestamp']}] {analise['descricao']}\n"
    
    # Insights descobertos
    if memoria_agente["insights_descobertos"]:
        resumo += "\nInsights importantes descobertos:\n"
        for insight in memoria_agente["insights_descobertos"][-3:]:
            resumo += f"‚Ä¢ {insight['insight']}\n"
    
    return resumo

def limpar_codigo(codigo):
    """Remove caracteres problem√°ticos e corrige erros comuns"""
    # Remove caracteres unicode malformados
    codigo = re.sub(r'\\u[0-9a-fA-F]{4}', '', codigo)
    codigo = re.sub(r'\\x[0-9a-fA-F]{2}', '', codigo)
    
    # Corrige erros comuns
    codigo = codigo.replace("plt0.", "plt.")
    codigo = codigo.replace("df0.", "df.")
    
    # Remove linhas problem√°ticas
    linhas = codigo.split('\n')
    linhas_filtradas = []
    
    for linha in linhas:
        # Remove imports de bibliotecas n√£o dispon√≠veis
        if 'import' in linha.lower():
            if any(lib in linha for lib in ['seaborn', 'scipy', 'sklearn', 'sns', 'plotly', 'sns as']):
                continue
        
        # Remove tentativas de recriar DataFrame
        if 'pd.read_csv' in linha or 'StringIO' in linha or 'io.StringIO' in linha:
            continue
        
        # Remove chamadas de fun√ß√µes inexistentes
        if 'spearman_kendall' in linha or '.spearmanr(' in linha:
            continue
            
        linhas_filtradas.append(linha)
    
    codigo = '\n'.join(linhas_filtradas)
    
    # Adiciona plt.show() se necess√°rio
    if 'plt.' in codigo and 'plt.show()' not in codigo:
        codigo += '\nplt.show()'
    
    return codigo

def gerar_codigo_fallback(pergunta, df):
    """Gera c√≥digo automaticamente quando o LLM falha"""
    pergunta_lower = pergunta.lower()
    
    # Histograma
    if any(palavra in pergunta_lower for palavra in ['histograma', 'distribui√ß√£o', 'distribuicao']):
        # Encontra coluna mencionada
        colunas = [col for col in df.columns if col.lower() in pergunta_lower]
        if colunas:
            col = colunas[0]
            return f"""plt.figure(figsize=(10, 6))
plt.hist(df['{col}'], bins=50, color='steelblue', edgecolor='black', alpha=0.7)
plt.title('Distribui√ß√£o de {col}')
plt.xlabel('{col}')
plt.ylabel('Frequ√™ncia')
plt.grid(True, alpha=0.3)
plt.show()"""
    
    # Scatter plot / Dispers√£o
    if any(palavra in pergunta_lower for palavra in ['dispers√£o', 'dispersao', 'scatter', 'rela√ß√£o', 'relacao']):
        colunas = [col for col in df.columns if col.lower() in pergunta_lower]
        if len(colunas) >= 2:
            return f"""plt.figure(figsize=(10, 6))
plt.scatter(df['{colunas[0]}'], df['{colunas[1]}'], alpha=0.5, c='steelblue')
plt.title('Dispers√£o: {colunas[0]} vs {colunas[1]}')
plt.xlabel('{colunas[0]}')
plt.ylabel('{colunas[1]}')
plt.grid(True, alpha=0.3)
plt.show()"""
    
    # Correla√ß√£o
    if 'correla√ß√£o' in pergunta_lower or 'correlacao' in pergunta_lower:
        colunas = [col for col in df.columns if col.lower() in pergunta_lower]
        if len(colunas) >= 2:
            return f"""correlacao = df[['{colunas[0]}', '{colunas[1]}']].corr()
print("\\nMatriz de Correla√ß√£o:")
print(correlacao)
print(f"\\nCorrela√ß√£o entre {colunas[0]} e {colunas[1]}: {{correlacao.iloc[0,1]:.4f}}")"""
        elif len(colunas) == 0:
            return """correlacao = df.select_dtypes(include=[np.number]).corr()
print("\\nMatriz de Correla√ß√£o:")
print(correlacao)"""
    
    # Estat√≠sticas
    if any(palavra in pergunta_lower for palavra in ['estat√≠stica', 'estatistica', 'describe', 'resumo']):
        colunas = [col for col in df.columns if col.lower() in pergunta_lower]
        if colunas:
            return f"""print(df['{colunas[0]}'].describe())"""
        else:
            return "print(df.describe())"
    
    # Boxplot
    if 'boxplot' in pergunta_lower or 'outlier' in pergunta_lower:
        colunas = [col for col in df.columns if col.lower() in pergunta_lower]
        if colunas:
            col = colunas[0]
            return f"""plt.figure(figsize=(10, 6))
plt.boxplot(df['{col}'].dropna())
plt.title('Boxplot de {col}')
plt.ylabel('{col}')
plt.grid(True, alpha=0.3)
plt.show()"""
    
    return None

def extrair_partes(texto):
    """Separa explica√ß√£o de c√≥digo"""
    if '```python' in texto:
        partes = texto.split('```python')
        explicacao = partes[0].strip()
        
        if len(partes) > 1:
            codigo = partes[1].split('```')[0].strip()
            return explicacao, codigo
    
    return texto.strip(), None

def eh_pergunta_sobre_conclusoes(pergunta):
    """Verifica se √© pergunta sobre conclus√µes/insights do agente"""
    palavras_chave = [
        'conclus', 'insight', 'aprend', 'descobr', 'observ',
        'padr√£o', 'tend√™ncia', 'opini√£o', 'an√°lise geral',
        'resumo', 'principais', 'importante', 'destaque'
    ]
    pergunta_lower = pergunta.lower()
    return any(palavra in pergunta_lower for palavra in palavras_chave)

def analisar_ambiguidade(pergunta, colunas_df):
    """Verifica se a pergunta √© amb√≠gua e sugere esclarecimentos"""
    pergunta_lower = pergunta.lower()
    
    # Perguntas sobre TODAS as colunas ou an√°lise geral s√£o V√ÅLIDAS
    perguntas_gerais_validas = [
        'tipos de dados', 'tipos de coluna', 'tipo das coluna',
        'quais coluna', 'quantas coluna', 'estrutura',
        'num√©ricas', 'categ√≥ricas', 'dtypes', 'info',
        'todas as coluna', 'todas coluna', 'cada coluna',
        'vari√¢ncia', 'variacao', 'desvio padr√£o',
        'estat√≠sticas', 'estatistica', 'describe',
        'valores nulos', 'missing', 'correla√ß√£o geral',
        'matriz de correla√ß√£o', 'correlacao geral'
    ]
    
    if any(termo in pergunta_lower for termo in perguntas_gerais_validas):
        return {"ambigua": False}
    
    # Se menciona "todas", "cada", "geral" - permite
    if any(palavra in pergunta_lower for palavra in ['todas', 'todos', 'cada', 'geral', 'comparar']):
        return {"ambigua": False}
    
    # Detecta perguntas REALMENTE muito vagas (menos de 3 palavras e sem contexto)
    perguntas_vagas = ['analise', 'mostre', 'me fale']
    if any(vaga in pergunta_lower for vaga in perguntas_vagas) and len(pergunta.split()) <= 2:
        return {
            "ambigua": True,
            "motivo": "muito_vaga",
            "sugestoes": [
                "Qual aspecto espec√≠fico voc√™ quer analisar?",
                "Voc√™ quer ver: distribui√ß√£o, correla√ß√£o, outliers ou estat√≠sticas?"
            ]
        }
    
    # Detecta men√ß√£o a "uma coluna" ou "a coluna" sem especificar qual
    if (('uma coluna' in pergunta_lower or 'a coluna' in pergunta_lower or 'essa coluna' in pergunta_lower) 
        and not any(col.lower() in pergunta_lower for col in colunas_df)):
        return {
            "ambigua": True,
            "motivo": "coluna_nao_especificada",
            "sugestoes": [
                f"Colunas dispon√≠veis: {', '.join(colunas_df[:10])}",
                "Qual coluna espec√≠fica voc√™ quer analisar?"
            ]
        }
    
    # Detecta "correla√ß√£o" entre duas colunas espec√≠ficas incompleta
    if 'correla√ß√£o entre' in pergunta_lower or 'correlacao entre' in pergunta_lower:
        colunas_mencionadas = [col for col in colunas_df if col.lower() in pergunta_lower]
        if len(colunas_mencionadas) == 1:
            colunas_numericas = df.select_dtypes(include=[np.number]).columns.tolist()
            return {
                "ambigua": True,
                "motivo": "correlacao_incompleta",
                "sugestoes": [
                    f"Correla√ß√£o de '{colunas_mencionadas[0]}' com qual outra coluna?",
                    f"Colunas num√©ricas dispon√≠veis: {', '.join(colunas_numericas[:8])}"
                ]
            }
    
    # Detecta "fa√ßa um gr√°fico" sem mais informa√ß√µes
    if ('fa√ßa um gr√°fico' in pergunta_lower or 'faca um grafico' in pergunta_lower) and len(pergunta.split()) <= 4:
        return {
            "ambigua": True,
            "motivo": "grafico_incompleto",
            "sugestoes": [
                "Que tipo de gr√°fico e de qual coluna?",
                "Ex: 'Fa√ßa um histograma de Amount' ou 'Gr√°fico de dispers√£o entre Time e Amount'"
            ]
        }
    
    return {"ambigua": False}

# An√°lise inicial autom√°tica dos dados
print("\nüîç Realizando an√°lise inicial dos dados...\n")
analise_inicial = {
    "tipos_colunas": df.dtypes.to_dict(),
    "valores_nulos": df.isnull().sum().to_dict(),
    "linhas_totais": len(df),
    "colunas_numericas": df.select_dtypes(include=[np.number]).columns.tolist(),
    "colunas_categoricas": df.select_dtypes(include=['object']).columns.tolist()
}
salvar_na_memoria("estatistica", analise_inicial)
print("‚úÖ An√°lise inicial conclu√≠da e armazenada na mem√≥ria.\n")

# Loop de perguntas
print("="*70)
print("üí¨ Voc√™ pode fazer perguntas sobre os dados.")
print("üí° Exemplos:")
print("   - Qual a distribui√ß√£o da vari√°vel Amount?")
print("   - Existe correla√ß√£o entre Time e Amount?")
print("   - Quais s√£o suas conclus√µes sobre os dados at√© agora?")
print("   - Existem outliers em Amount?")
print("="*70)

while True:
    pergunta = input("\nüó£Ô∏è  Sua pergunta (ou 'sair'): ")
    
    if pergunta.lower() in ['sair', 'exit', 'quit']:
        print("\n" + "="*70)
        print("üìä RESUMO DA SESS√ÉO")
        print("="*70)
        print(f"Total de an√°lises realizadas: {len(memoria_agente['analises_realizadas'])}")
        print(f"Total de insights descobertos: {len(memoria_agente['insights_descobertos'])}")
        print("\nüëã Encerrando. At√© logo!")
        break
    
    if not pergunta.strip():
        continue
    
    # NOVO: Verifica ambiguidade antes de processar
    analise_ambig = analisar_ambiguidade(pergunta, df.columns.tolist())
    
    if analise_ambig["ambigua"]:
        print("\nü§î " + "="*68)
        print("Hmm, preciso de mais informa√ß√µes para responder bem!")
        print("="*68)
        
        for sugestao in analise_ambig["sugestoes"]:
            print(f"\nüí° {sugestao}")
        
        print("\n" + "="*68)
        print("Por favor, reformule sua pergunta com mais detalhes.")
        print("="*68)
        continue
    
    # Se for pergunta sobre conclus√µes, responde da mem√≥ria
    if eh_pergunta_sobre_conclusoes(pergunta):
        print("\nüß† Consultando mem√≥ria do agente...\n")
        print("="*70)
        print("üí≠ CONCLUS√ïES E INSIGHTS DO AGENTE")
        print("="*70)
        
        if memoria_agente["analises_realizadas"]:
            print(f"\nüìà An√°lises realizadas: {len(memoria_agente['analises_realizadas'])}")
            print("\nüîç Principais descobertas:")
            
            for i, insight in enumerate(memoria_agente["insights_descobertos"], 1):
                print(f"\n{i}. {insight['insight']}")
            
            if not memoria_agente["insights_descobertos"]:
                print("\n‚ö†Ô∏è  Ainda n√£o registrei insights espec√≠ficos.")
                print("Continue fazendo an√°lises para que eu possa formar conclus√µes!")
        else:
            print("\n‚ö†Ô∏è  Ainda n√£o realizei an√°lises suficientes para ter conclus√µes.")
            print("Fa√ßa perguntas sobre os dados para que eu possa analis√°-los!")
        
        print("\n" + "="*70)
        continue
    
    # Gerar contexto com mem√≥ria
    contexto_dados = df.head(5).to_string()
    contexto_memoria = gerar_contexto_memoria()
    
    # Prompt otimizado com mem√≥ria e instru√ß√µes para conclus√µes
    prompt = f"""Voc√™ √© um agente de an√°lise de dados inteligente e reflexivo.

DADOS DISPON√çVEIS:
- DataFrame 'df' J√Å CARREGADO na mem√≥ria
- Total de linhas: {len(df)}
- Colunas: {', '.join(df.columns.tolist())}
- Tipos: {len(analise_inicial['colunas_numericas'])} num√©ricas, {len(analise_inicial['colunas_categoricas'])} categ√≥ricas

PR√âVIA DOS DADOS:
{contexto_dados}

{contexto_memoria}

BIBLIOTECAS DISPON√çVEIS:
‚úÖ pandas (pd), numpy (np), matplotlib.pyplot (plt)
‚ùå N√ÉO use: seaborn, scipy, sklearn, plotly

INSTRU√á√ïES CR√çTICAS:
1. Voc√™ DEVE SEMPRE gerar c√≥digo Python execut√°vel
2. TODO c√≥digo deve estar entre ```python e ``` - SEM EXCE√á√ïES!
3. N√ÉO escreva apenas explica√ß√µes - SEMPRE inclua c√≥digo funcional
4. Seja DIRETO: 2-3 linhas de explica√ß√£o + c√≥digo completo

FORMATO OBRIGAT√ìRIO:
Explica√ß√£o breve (2-3 linhas)

```python
# C√≥digo completo aqui
plt.figure(figsize=(10, 6))
plt.hist(df['Amount'], bins=50)
plt.title('T√≠tulo')
plt.show()
```

Conclus√£o (1 linha)

EXEMPLOS COMPLETOS:

Histograma:
```python
plt.figure(figsize=(10, 6))
plt.hist(df['Amount'], bins=50, color='steelblue', edgecolor='black')
plt.title('Distribui√ß√£o de Amount')
plt.xlabel('Valor')
plt.ylabel('Frequ√™ncia')
plt.grid(True, alpha=0.3)
```

Scatter:
```python
plt.figure(figsize=(10, 6))
plt.scatter(df['Time'], df['Amount'], alpha=0.5)
plt.title('Time vs Amount')
plt.xlabel('Time')
plt.ylabel('Amount')
plt.grid(True, alpha=0.3)
```

Correla√ß√£o:
```python
corr = df[['Time', 'Amount']].corr()
print(corr)
```

IMPORTANTE: Se a pergunta pede gr√°fico/an√°lise, voc√™ DEVE gerar c√≥digo entre ```python ```!

EXEMPLOS DE C√ìDIGO CORRETO:
- Correla√ß√£o: df[['col1', 'col2']].corr()
- Dispers√£o: plt.scatter(df['x'], df['y'])
- Histograma: plt.hist(df['col'], bins=30)
- Estat√≠sticas: df['col'].describe()

PERGUNTA DO USU√ÅRIO: {pergunta}

Sua resposta (explica√ß√£o + c√≥digo se necess√°rio + conclus√£o):"""

    print("\nü§ñ Analisando...\n")
    
    try:
        resposta = requests.post(
            "http://localhost:11434/api/generate",
            json={
                "model": "phi3",
                "prompt": prompt,
                "stream": True,
                "options": {
                    "temperature": 0.6,
                    "num_predict": 700,
                    "top_p": 0.9,
                }
            },
            stream=True,
            timeout=120
        )
        
        saida = ""
        for linha in resposta.iter_lines():
            if linha:
                try:
                    dados = json.loads(linha.decode("utf-8"))
                    if "response" in dados:
                        saida += dados["response"]
                        if len(saida) > 5000:
                            break
                except json.JSONDecodeError:
                    continue
        
        if not saida.strip():
            print("‚ö†Ô∏è  Resposta vazia. Tente reformular.")
            continue
        
        # Extrair explica√ß√£o e c√≥digo
        explicacao, codigo = extrair_partes(saida)
        
        # Mostra explica√ß√£o
        if explicacao:
            print("üí¨ " + "="*68)
            print(explicacao)
            print("="*68 + "\n")
            
            # Salvar na mem√≥ria
            salvar_na_memoria("analise", pergunta[:80])
        
        # Se n√£o gerou c√≥digo mas pergunta precisa, usa fallback
        if not codigo:
            print("‚öôÔ∏è  Gerando c√≥digo automaticamente...\n")
            codigo = gerar_codigo_fallback(pergunta, df)
            
            if codigo:
                print("üí° O modelo n√£o gerou c√≥digo, usando solu√ß√£o autom√°tica.\n")
        
        # Executar c√≥digo se houver
        if codigo:
            codigo_limpo = limpar_codigo(codigo)
            
            if codigo_limpo.strip():
                print("üîß Executando c√≥digo...\n")
                
                try:
                    # Executar c√≥digo
                    exec(codigo_limpo, {
                        "df": df,
                        "plt": plt,
                        "pd": pd,
                        "np": np,
                        "print": print
                    })
                    
                    print("\n‚úÖ C√≥digo executado com sucesso!")
                    
                    # Tentar extrair insight da explica√ß√£o
                    if len(explicacao) > 50:
                        # Pega √∫ltima frase como poss√≠vel insight
                        frases = explicacao.split('.')
                        if len(frases) > 1:
                            possivel_insight = frases[-2].strip()
                            if len(possivel_insight) > 20:
                                salvar_na_memoria("insight", possivel_insight)
                    
                except Exception as e:
                    print(f"\n‚ö†Ô∏è  Erro: {type(e).__name__}: {str(e)}")
                    print("üí° A explica√ß√£o acima ainda √© v√°lida!\n")
        
    except requests.exceptions.RequestException as e:
        print(f"\n‚ö†Ô∏è  Erro de conex√£o: {e}")
        print("Verifique se Ollama est√° rodando: ollama serve\n")
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Interrompido.\n")
        break
    except Exception as e:
        print(f"\n‚ö†Ô∏è  Erro: {type(e).__name__}: {e}\n")